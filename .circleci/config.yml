# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  anchore: anchore/anchore-engine@1.6.0
  github-release: h-matsuo/github-release@0.1.3
  slack: circleci/slack@3.4.2

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk --no-cache add bash
  apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
  apk upgrade --no-cache
  apk --no-cache add \
          python3 \
          py3-pip \
          groff \
          less \
          mailcap
  pip3 install --upgrade pip awscli==1.14.5 s3cmd==2.0.1 python-magic

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up
##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker:
      - image: node:12.16.1-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  build-docker-images:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker docker-image.tar
          command: |
            echo "Building Docker image local"
            IMAGE_TAG=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:local npm run ci:build:docker --prefix packages/frontend
            IMAGE_TAG=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:local npm run ci:build:docker --prefix packages/backend
      - run:
          name: Save docker image to workspace
          command: |
            docker save -o /tmp/docker-images.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images.tar
  setup-frontend:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm install --prefix ./packages/frontend
      - run:
          name: Build
          command: npm run build --prefix ./packages/frontend
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "packages/frontend/package-lock.json" }}
          paths:
            - packages/frontend/node_modules

  setup-backend:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm install --prefix ./packages/backend
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "packages/backend/package-lock.json" }}
          paths:
            - packages/backend/node_modules

  test:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "packages/backend/package-lock.json" }}
      - run:
          name: Execute code coverage check
          command: npm run test:junit-coverage-check --prefix ./packages/backend
      - store_artifacts:
          path: ./packages/backend/coverage
          prefix: coverage
      - store_test_results:
          path: ./packages/backend/coverage
      - store_artifacts:
          path: ./packages/backend/test/results
          prefix: test
      - store_test_results:
          path: ./packages/backend/test/results
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp ./packages/backend/coverage/lcov.info $AWS_S3_DIR_SONARQUBE/mojawallet/packages/backend/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi

  audit-licenses:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/backend/package-lock.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/frontend/package-lock.json" }}
      - run:
          name: Prune non-production packages before running license-scanner
          command: npm prune --prefix ./packages/backend --production && npm prune --prefix ./packages/frontend --production
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY/packages/backend make run && pathToRepo=$CIRCLE_WORKING_DIRECTORY/packages/frontend make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  vulnerability-check:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/frontend/package-lock.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/backend/package-lock.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities in backend
          command: npm run --prefix ./packages/backend audit:check --silent -- --json > ./audit/results/backendAuditResults.json
      - run:
          name: Check for new npm vulnerabilities in backend
          command: npm run --prefix ./packages/frontend audit:check --silent -- --json > ./audit/results/frontendAuditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  image-scan:
    executor: anchore/anchore_engine
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install docker dependencies for anchore
          command: |
            apk add --update python3 py3-pip docker python3-dev libffi-dev openssl-dev gcc libc-dev make jq npm
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker images from workspace
          command: docker load -i /tmp/docker-images.tar
      - run:
          name: Download the mojaloop/ci-config repo
          command: |
            git clone https://github.com/mojaloop/ci-config /tmp/ci-config
            # Generate the mojaloop anchore-policy
            cd /tmp/ci-config/container-scanning && ./mojaloop-policy-generator.js /tmp/mojaloop-policy.json
      - run:
          name: Pull base image locally
          command: |
            docker pull node:12.16.1-alpine
      # Analyze the base and derived image
      # Note: It seems images are scanned in parallel, so preloading the base image result doesn't give us any real performance gain
      - anchore/analyze_local_image:
          # Force the older version, version 0.7.0 was just published, and is broken
          anchore_version: v0.6.1
          image_name: "docker.io/node:12.16.1-alpine $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:local"
          policy_failure: false
          timeout: '1000'
          # Note: if the generated policy is invalid, this will fallback to the default policy, which we don't want!
          policy_bundle_file_path: /tmp/mojaloop-policy.json
      - run:
          name: Upload Anchore reports to s3
          command: |
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
            aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive
      - run:
          name: Evaluate failures
          command: /tmp/ci-config/container-scanning/anchore-result-diff.js anchore-reports/node_12.16.1-alpine-policy.json anchore-reports/${CIRCLE_PROJECT_REPONAME}*-policy.json
      - slack/status:
          fail_only: true
          webhook: "$SLACK_WEBHOOK_ANNOUNCMENT_CI_CD"
          failure_message: 'Anchore Image Scan failed  for: \`"${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"\`'
      - store_artifacts:
          path: anchore-reports

  release:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          name: Install npm dependencies
          command: npm install
      - run:
          name: Configure git + ssh
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git checkout ${CIRCLE_BRANCH}
            mkdir -p ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            chmod 0200 ~/.ssh/*
      - run:
          name: Generate changelog and bump package version
          command: npm run release
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - checkout
      - run:
          name: Fetch updated release branch
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          # Note: this is rather imperfect, but will do for now
          name: Format the changelog into the github release body and get release tag
          command: |
            git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
            echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
            echo 'export RELEASE_TAG=`cat package.json | jq -r .version`' >> $BASH_ENV
      - run:
          name: check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - github-release/create:
          github-token-variable: ${GITHUB_TOKEN}
          tag: v${RELEASE_TAG}
          title: v${RELEASE_TAG} Release
          description: ${RELEASE_CHANGES}
          file-path: CHANGELOG.md      
      - slack/status:
          webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
          success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"v${RELEASE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"v${RELEASE_TAG}"'

  publish:
    executor: default-machine
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-images.tar
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:latest
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:${CIRCLE_TAG}
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:latest
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:${CIRCLE_TAG}
      - run:
          name: Publish Docker image latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:latest"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:latest
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:${CIRCLE_TAG}"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-frontend:${CIRCLE_TAG}
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:latest"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:latest
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:${CIRCLE_TAG}"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME-backend:${CIRCLE_TAG}
      - slack/status:
          fail_only: true
          webhook: "$SLACK_WEBHOOK_ANNOUNCMENT_CI_CD"
          failure_message: 'Publishing docker image failed for: \`"${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"\`'

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - build-docker-images:
          context: org-global
          filters:
            tags:
              only: /.*/
      - setup-frontend:
          context: org-global
          filters:
            tags:
              only: /.*/
      - setup-backend:
          context: org-global
          filters:
            tags:
              only: /.*/
      - test:
          context: org-global
          requires:
            - setup-backend
          filters:
            tags:
              only: /.*/
      - audit-licenses:
          context: org-global
          requires:
            - setup-backend
            - setup-frontend
          filters:
            tags:
              only: /.*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup-backend
            - setup-frontend
          filters:
            tags:
              only: /.*/
      # - image-scan:
      #     context: org-global
      #     requires:
      #       - build-docker-images
      #     filters:
      #       tags:
      #         only: /.*/
      #       branches:
      #         only:
      #           - master

      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            - test
            - audit-licenses
            - vulnerability-check
            - image-scan
          filters:
            branches:
              only:
                - master

      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - master

      # New Tags are built and deployed as docker artifacts
      - publish:
          context: org-global
          requires:
            - audit-licenses
            - image-scan
            - test
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*/